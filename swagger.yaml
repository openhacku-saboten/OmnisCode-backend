swagger: "2.0"
info:
  description: "コード共有SNS OmnisCode のAPI"
  version: "1.0.0"
  title: "OmnisCode API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1"
tags:
- name: "code"
  description: "スレッドのメインとなる投稿"
- name: "comment"
  description: "スレッドにつくコメント"
- name: "user"
  description: "ユーザー"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "204":
          description: "successful operation"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "事前にloginが必要"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: "successful operation"
      security:
      - tokenAuth: []
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "事前にloginが必要"
      operationId: "deleteUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
      security:
      - tokenAuth: []
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: "仕様は未定"
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
          schema:
            $ref: "#/definitions/errorResponse"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: "事前にloginが必要"
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
      security:
      - tokenAuth: []
  /user/{userID}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: "User情報を取得"
      operationId: "getUserById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/errorResponse"
  /user/{userID}/code:
    get:
      tags:
      - "user"
      summary: "Get codes by user id"
      description: "Userが投稿したCode一覧を取得"
      operationId: "getCodesByuserID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Code"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/errorResponse"
  /user/{userID}/comment:
    get:
      tags:
      - "user"
      summary: "Get comments by user id"
      description: "Userが投稿したComment一覧を取得"
      operationId: "getCommentsByuserID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/errorResponse"
  /code:
    post:
      tags:
      - "code"
      summary: "Create code"
      description: "事前にloginが必要"
      operationId: "addCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Code"
      responses:
        "204":
          description: "successful operation"
      security:
      - tokenAuth: []
  /code/{codeID}:
    get:
      tags:
      - "code"
      summary: "Find code by code id"
      operationId: "getCodeById"
      produces:
      - "application/json"
      parameters:
      - name: "codeID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Code"
        "404":
          description: "Code not found"
          schema:
            $ref: "#/definitions/errorResponse"
    put:
      tags:
      - "code"
      summary: "Update code"
      description: "事前にloginが必要"
      operationId: "updateCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "codeID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Code"
      responses:
        "200":
          description: "successful operation"
      security:
      - tokenAuth: []
    delete:
      tags:
      - "code"
      summary: "Delete code"
      description: "事前にloginが必要"
      operationId: "deleteCode"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "codeID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
      security:
      - tokenAuth: []
  /code/{codeID}/comment:
    get:
      tags:
      - "comment"
      summary: "Get comments by code id"
      operationId: "getCommentsBycodeID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "codeID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Comment"
    post:
      tags:
      - "comment"
      summary: "Create comment"
      description: "事前にloginが必要"
      operationId: "addComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "codeID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/Comment"
      responses:
        "200":
          description: "successful operation"
      security:
      - tokenAuth: []
  /code/{codeID}/comment/{commentID}:
    delete:
      tags:
      - "comment"
      summary: "Delete comment"
      description: "事前にloginが必要"
      operationId: "deleteComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "codeID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "404":
          description: "Comment not found"
          schema:
            $ref: "#/definitions/errorResponse"
      security:
      - tokenAuth: []
  
securityDefinitions:
  tokenAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      twitter_id:
        type: "string"
      profile:
        type: "string"
  Code:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      code:
        type: "string"
      language:
        type: "string"
      description:
        type: "string"
      source:
        type: "string"
        description: "codeの引用元(urlなど)"
  Comment:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "integer"
        format: "int64"
      code_id:
        type: "integer"
        format: "int64"
      line:
        type: "integer"
        format: "int32"
        description: "レビュー時に指定した行数"
      description:
        type: "string"
  errorResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
