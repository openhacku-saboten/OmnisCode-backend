swagger: "2.0"
info:
  description: "コード共有SNS OmnisCode のAPI"
  version: "1.0.0"
  title: "OmnisCode API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/api/v1"
tags:
- name: "user"
  description: "ユーザー"
- name: "post"
  description: "スレッドのメインとなる投稿"
- name: "comment"
  description: "スレッドにつくコメント．コードに対するハイライトor変更が含まれる場合がある"
schemes:
- "https"
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "事前にloginが必要"
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        "201":
          description: "successful operation"
      security:
      - Bearer: []
    put:
      tags:
      - "user"
      summary: "Update user"
      description: "事前にloginが必要"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        "200":
          description: "successful operation"
      security:
      - Bearer: []
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "事前にloginが必要"
      operationId: "deleteUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
      security:
      - Bearer: []
  /user/{userID}:
    get:
      tags:
      - "user"
      summary: "Get user by user id"
      description: "User情報を取得"
      operationId: "getUserByID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/errorResponse"
  /user/{userID}/post:
    get:
      tags:
      - "user"
      summary: "Get posts by user id"
      description: "Userが投稿したPost一覧を取得"
      operationId: "getPostsByUserID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/PostResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/errorResponse"
  /user/{userID}/comment:
    get:
      tags:
      - "user"
      summary: "Get comments by user id"
      description: "Userが投稿したComment一覧を取得"
      operationId: "getCommentsByUserID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userID"
        in: "path"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/CommentResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/errorResponse"
  /post:
    get:
      tags:
      - "post"
      summary: "Get posts"
      description: "Post一覧を取得"
      operationId: "getPosts"
      produces:
      - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/PostResponse"
        "404":
          description: "Post not found"
          schema:
            $ref: "#/definitions/errorResponse"
    post:
      tags:
      - "post"
      summary: "Create post"
      description: "事前にloginが必要"
      operationId: "addPost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PostRequest"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostResponse"
      security:
      - Bearer: []
  /post/{postID}:
    get:
      tags:
      - "post"
      summary: "Find post by post id"
      operationId: "getPostByID"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/PostResponse"
        "404":
          description: "Post not found"
          schema:
            $ref: "#/definitions/errorResponse"
    put:
      tags:
      - "post"
      summary: "Update post"
      description: "事前にloginが必要"
      operationId: "updatePost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/PostRequest"
      responses:
        "200":
          description: "successful operation"
      security:
      - Bearer: []
    delete:
      tags:
      - "post"
      summary: "Delete post"
      description: "事前にloginが必要"
      operationId: "deletePost"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
      security:
      - Bearer: []
  /post/{postID}/comment:
    get:
      tags:
      - "comment"
      summary: "Get comments by post id"
      description: "Postに関連付けられるcommentの一覧を取得"
      operationId: "getCommentsByPostID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/CommentResponse"
    post:
      tags:
      - "comment"
      summary: "Create comment"
      description: "事前にloginが必要"
      operationId: "addComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        required: true
        schema:
          $ref: "#/definitions/CommentRequest"
      responses:
        "200":
          description: "successful operation"
      security:
      - Bearer: []
  /post/{postID}/comment/{commentID}:
    get:
      tags:
      - "comment"
      summary: "Get comment by ID"
      operationId: "GetCommentByID"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/CommentResponse"
        "404":
          description: "Comment not found"
          schema:
            $ref: "#/definitions/errorResponse"
    put:
      tags:
      - "comment"
      summary: "Update comment"
      description: "事前にloginが必要"
      operationId: "updateComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/CommentRequest"
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "Comment not found"
          schema:
            $ref: "#/definitions/errorResponse"
      security:
      - Bearer: []
    delete:
      tags:
      - "comment"
      summary: "Delete comment"
      description: "事前にloginが必要"
      operationId: "deleteComment"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "postID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "commentID"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
        "404":
          description: "Comment not found"
          schema:
            $ref: "#/definitions/errorResponse"
      security:
      - Bearer: []

securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "'Authorization: Bearer $TOKEN'の形式でheaderにTokenを付与"

definitions:
  UserRequest:
    type: "object"
    properties:
      name:
        type: "string"
      twitter_id:
        type: "string"
      profile:
        type: "string"
  UserResponse:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      twitter_id:
        type: "string"
      profile:
        type: "string"
      icon_url:
        type: "string"
  PostRequest:
    type: "object"
    properties:
      title:
        type: "string"
      code:
        type: "string"
        description: "ソースコード"
      language:
        type: "string"
        description: "ソースコードの言語"
      content:
        type: "string"
        description: "説明の内容"
      source:
        type: "string"
        description: "postの引用元(urlなど)"
  PostResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "string"
      title:
        type: "string"
      code:
        type: "string"
        description: "ソースコード"
      language:
        type: "string"
        description: "ソースコードの言語"
      content:
        type: "string"
        description: "説明の内容"
      source:
        type: "string"
        description: "postの引用元(urlなど)"
      created_at:
        type: "string"
        description: "YYYY-mm-ddTHH:MM:SS+0900形式の投稿作成日時"
        example: "2006-01-02T15:04:05+09:00"
      updated_at:
        type: "string"
        description: "YYYY-mm-ddTHH:MM:SS+0900形式の投稿最終更新日時"
        example: "2006-01-02T15:04:05+09:00"
  CommentRequest:
    type: "object"
    properties:
      type:
        type: "string"
        description: "highlight:コードのハイライトを含む commit:コードの変更を含む none:コメントのみ"
        enum:
          - "highlight"
          - "commit"
          - "none"
      content:
        type: "string"
        description: "コメントの内容(type:noneなら必要．他のtypeでも含んでいて良い)"
      first_line:
        type: "integer"
        format: "int32"
        description: "ハイライトする行の開始行数(type:highlightのみ必要)"
      last_line:
        type: "integer"
        format: "int32"
        description: "ハイライトする行の終了行数(type:highlightのみ必要)"
      code:
        type: "string"
        description: "変更後のコードすべてを含む(type:commitのみ必要)"
  CommentResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user_id:
        type: "string"
      post_id:
        type: "integer"
        format: "int64"
      type:
        type: "string"
        description: "highlight:コードのハイライトを含む commit:コードの変更を含む none:コメントのみ"
        enum:
          - "highlight"
          - "commit"
          - "none"
      content:
        type: "string"
        description: "コメントの内容(すべてのtypeに含まれる)"
      first_line:
        type: "integer"
        format: "int32"
        description: "ハイライトする行の開始行数(type:highlightのみ)"
      last_line:
        type: "integer"
        format: "int32"
        description: "ハイライトする行の終了行数(type:highlightのみ)"
      code:
        type: "string"
        description: "変更後のコードすべてを含む(type:commitのみ)"
      created_at:
        type: "string"
        description: "YYYY-mm-ddTHH:MM:SS+0900形式の投稿作成日時"
        example: "2006-01-02T15:04:05+09:00"
      updated_at:
        type: "string"
        description: "YYYY-mm-ddTHH:MM:SS+0900形式の投稿最終更新日時"
        example: "2006-01-02T15:04:05+09:00"
  errorResponse:
    type: "object"
    properties:
      post:
        type: "integer"
        format: "int32"
      message:
        type: "string"
