// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go

package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entity "github.com/openhacku-saboten/OmnisCode-backend/domain/entity"
	reflect "reflect"
)

// MockComment is a mock of Comment interface
type MockComment struct {
	ctrl     *gomock.Controller
	recorder *MockCommentMockRecorder
}

// MockCommentMockRecorder is the mock recorder for MockComment
type MockCommentMockRecorder struct {
	mock *MockComment
}

// NewMockComment creates a new mock instance
func NewMockComment(ctrl *gomock.Controller) *MockComment {
	mock := &MockComment{ctrl: ctrl}
	mock.recorder = &MockCommentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockComment) EXPECT() *MockCommentMockRecorder {
	return _m.recorder
}

// FindByID mocks base method
func (_m *MockComment) FindByID(ctx context.Context, postID int, commentID int) (*entity.Comment, error) {
	ret := _m.ctrl.Call(_m, "FindByID", ctx, postID, commentID)
	ret0, _ := ret[0].(*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (_mr *MockCommentMockRecorder) FindByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByID", reflect.TypeOf((*MockComment)(nil).FindByID), arg0, arg1, arg2)
}

// FindByUserID mocks base method
func (_m *MockComment) FindByUserID(ctx context.Context, uid string) ([]*entity.Comment, error) {
	ret := _m.ctrl.Call(_m, "FindByUserID", ctx, uid)
	ret0, _ := ret[0].([]*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID
func (_mr *MockCommentMockRecorder) FindByUserID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByUserID", reflect.TypeOf((*MockComment)(nil).FindByUserID), arg0, arg1)
}

// FindByPostID mocks base method
func (_m *MockComment) FindByPostID(ctx context.Context, postID int) ([]*entity.Comment, error) {
	ret := _m.ctrl.Call(_m, "FindByPostID", ctx, postID)
	ret0, _ := ret[0].([]*entity.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPostID indicates an expected call of FindByPostID
func (_mr *MockCommentMockRecorder) FindByPostID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "FindByPostID", reflect.TypeOf((*MockComment)(nil).FindByPostID), arg0, arg1)
}

// Insert mocks base method
func (_m *MockComment) Insert(ctx context.Context, comment *entity.Comment) error {
	ret := _m.ctrl.Call(_m, "Insert", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (_mr *MockCommentMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Insert", reflect.TypeOf((*MockComment)(nil).Insert), arg0, arg1)
}

// Update mocks base method
func (_m *MockComment) Update(ctx context.Context, comment *entity.Comment) error {
	ret := _m.ctrl.Call(_m, "Update", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (_mr *MockCommentMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Update", reflect.TypeOf((*MockComment)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (_m *MockComment) Delete(ctx context.Context, comment *entity.Comment) error {
	ret := _m.ctrl.Call(_m, "Delete", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockCommentMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockComment)(nil).Delete), arg0, arg1)
}
